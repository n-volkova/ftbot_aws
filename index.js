const { Telegraf, Markup } = require('telegraf');

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });
const { 
  checkAccess,
  sortedTrainers
} = require('./users');
const { getReport } = require('./search');
const { logger } = require('./logger');

const bot = new Telegraf(process.env.BOT_TOKEN);
let userId;

bot.start(ctx => {
  userId = ctx.from.id;
  if (!checkAccess(ctx)) return;

  try {
    ctx.reply('–ü—Ä–∏–≤–µ—Ç, —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä!\n–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\nüíé /report - –æ—Ç—á–µ—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞\nüíé /report{month} - –æ—Ç—á–µ—Ç –ø–æ –º–µ—Å—è—Ü—É —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /reportaug, /reportaugust –∏–ª–∏ /report8)\nüíé /report{month} - –æ—Ç—á–µ—Ç –ø–æ –º–µ—Å—è—Ü—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /reportoct_2023, /reportoctober_2023 –∏–ª–∏ /report10_2023)\nüíé79999999999 - –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞');
  } catch (err) {
    logger.error(err);
  }
});

bot.hears(/\d{11}/, async (ctx) => {
  if (!checkAccess(ctx)) return;

  const phone = ctx.match[0];
  const keyboardTrainers = sortedTrainers.map(trainer => {
    return Markup.button.callback(trainer, `${phone}${trainer}`); 
  });
  
  return ctx.reply('–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–µ—Ä–∞:', Markup
    .inlineKeyboard(keyboardTrainers, {
      columns: 3
    })
    .oneTime()
    .resize()
  );
});

bot.action(/(?<client>\d{11})(?<trainer>[–ê-–Ø–∞-—è]* [–ê-–Ø–∞-—è]*)/, async (ctx) => {
  if (!checkAccess(ctx)) return;

  const { client, trainer } = ctx.match.groups;
  ctx.deleteMessage();
  return ctx.reply(`–ö–ª–∏–µ–Ω—Ç: ${client}\n–¢—Ä–µ–Ω–µ—Ä: ${trainer}`);
});

const reportCommand = /\/report(?<month>[a-z]{3,9}|\d{1,2})?(_)?(?<year>20\d{2})?$/;
bot.hears(reportCommand, async (ctx) => {
  if (!checkAccess(ctx)) return;

  const { month, year } = ctx.match.groups;
  const availableArgs = [undefined, 
    '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', 
    '01', '02', '03', '04', '05', '06', '07', '08', '09',
    'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec',
    'january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];

  if (availableArgs.includes(month)) {
    try {
      let report = await getReport(month, parseInt(year));
      if (report) {
        ctx.reply(report);
      }
    } catch (err) {
      logger.error(err);
    } finally {
      return;
    }
  } else {
    ctx.reply('–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ –∫–æ–º–∞–Ω–¥—ã');
    return;
  };
});
    
bot.launch();
